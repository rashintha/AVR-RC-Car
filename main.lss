
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000002a6  0000033a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  0000033a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008da  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071a  00000000  00000000  00000c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cc  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001674  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c9  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014e  00000000  00000000  00001ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001c0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 25 01 	call	0x24a	; 0x24a <main>
  88:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setupPWM>:
void setupPWM(void);
void pwm(uint8_t channel, uint16_t onTime, uint16_t period);

//Initializing PWM
void setupPWM(void){
	OC1x_DDR |= (1 << OC1A_PIN) | (1 << OC1B_PIN);
  90:	84 b1       	in	r24, 0x04	; 4
  92:	86 60       	ori	r24, 0x06	; 6
  94:	84 b9       	out	0x04, r24	; 4
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);	
  96:	82 ea       	ldi	r24, 0xA2	; 162
  98:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
  9c:	8a e1       	ldi	r24, 0x1A	; 26
  9e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
}
  a2:	08 95       	ret

000000a4 <pwm>:

//Set PWM of the selected channel
void pwm(uint8_t channel, uint16_t onTime, uint16_t period){
	ICR1 = period;
  a4:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  a8:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	29 f4       	brne	.+10     	; 0xba <pwm+0x16>
  b0:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  b4:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  b8:	08 95       	ret
  ba:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  be:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  c2:	08 95       	ret

000000c4 <initUSART>:

void initUSART(void){
   //Set Baud rate; ubrr_value = F_OSC/(16 x Baud_rate) - 1; e.g. 16e6/(9600*16) -1 = 103
	uint32_t ubrr_value;
	ubrr_value = F_CPU/16/BAUD_RATE -1; 
	UBRRL_REG = ubrr_value;
  c4:	87 e6       	ldi	r24, 0x67	; 103
  c6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UBRRH_REG = (ubrr_value >> 8);
  ca:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UCSRC_REG |= (1 << UCSZ1_BIT) | (1 << UCSZ0_BIT);
  ce:	e2 ec       	ldi	r30, 0xC2	; 194
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	86 60       	ori	r24, 0x06	; 6
  d6:	80 83       	st	Z, r24
	#ifdef ATMEGA_32A
	UCSRC_REG |= (1 << URSEL_BIT);
	#endif

	//Enable The receiver and transmitter
	UCSRB_REG = (1 << RXEN_BIT) | (1 << TXEN_BIT);
  d8:	88 e1       	ldi	r24, 0x18	; 24
  da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
}
  de:	08 95       	ret

000000e0 <getCh>:

uint8_t getCh(void){
	while(!(UCSRA_REG & (1 << RXC_BIT)));
  e0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  e4:	87 ff       	sbrs	r24, 7
  e6:	fc cf       	rjmp	.-8      	; 0xe0 <getCh>
	return UDR_REG;
  e8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  ec:	08 95       	ret

000000ee <putCh>:

void putCh(uint8_t data){
	while(!(UCSRA_REG & (1 << UDRE_BIT)));
  ee:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  f2:	95 ff       	sbrs	r25, 5
  f4:	fc cf       	rjmp	.-8      	; 0xee <putCh>
	UDR_REG = data;
  f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  fa:	08 95       	ret

000000fc <controlMotor>:
	
	return 0;
}

void controlMotor(uint8_t status){
	switch(status){
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	09 f4       	brne	.+2      	; 0x102 <controlMotor+0x6>
 100:	5a c0       	rjmp	.+180    	; 0x1b6 <controlMotor+0xba>
 102:	08 f1       	brcs	.+66     	; 0x146 <controlMotor+0x4a>
 104:	84 30       	cpi	r24, 0x04	; 4
 106:	09 f4       	brne	.+2      	; 0x10a <controlMotor+0xe>
 108:	8d c0       	rjmp	.+282    	; 0x224 <controlMotor+0x128>
 10a:	85 30       	cpi	r24, 0x05	; 5
 10c:	09 f4       	brne	.+2      	; 0x110 <controlMotor+0x14>
 10e:	93 c0       	rjmp	.+294    	; 0x236 <controlMotor+0x13a>
				channelA -= SPEED_DECREASE_RATE;
				channelB = channelA;
			}
	}

	pwm(CH_A, channelA, MAX_PWM_SPEED);
 110:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <channelA>
 114:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <channelA+0x1>
	ICR1 = period;
 118:	80 e2       	ldi	r24, 0x20	; 32
 11a:	9e e4       	ldi	r25, 0x4E	; 78
 11c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 120:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 124:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 128:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	pwm(CH_B, channelB, MAX_PWM_SPEED);
 12c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <channelB>
 130:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <channelB+0x1>
	ICR1 = period;
 134:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 138:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 13c:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 140:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 144:	08 95       	ret
			if(channelA_status == FORWARD && channelB_status == FORWARD){
 146:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <channelA_status>
 14a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <channelA>
 14e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <channelA+0x1>
 152:	21 11       	cpse	r18, r1
 154:	16 c0       	rjmp	.+44     	; 0x182 <controlMotor+0x86>
 156:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 15a:	21 11       	cpse	r18, r1
 15c:	d9 cf       	rjmp	.-78     	; 0x110 <controlMotor+0x14>
				(channelA == MAX_PWM_SPEED) ? (channelA = MAX_PWM_SPEED) : (channelA += SPEED_INCREASE_RATE);
 15e:	80 32       	cpi	r24, 0x20	; 32
 160:	2e e4       	ldi	r18, 0x4E	; 78
 162:	92 07       	cpc	r25, r18
 164:	29 f0       	breq	.+10     	; 0x170 <controlMotor+0x74>
 166:	0a 96       	adiw	r24, 0x0a	; 10
 168:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <channelA+0x1>
 16c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <channelA>
				channelB = channelA;
 170:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <channelA>
 174:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <channelA+0x1>
				channelB = channelA;
 178:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <channelB+0x1>
 17c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <channelB>
 180:	c7 cf       	rjmp	.-114    	; 0x110 <controlMotor+0x14>
			}else if(channelA_status == REVERSE && channelB_status == REVERSE){
 182:	21 30       	cpi	r18, 0x01	; 1
 184:	29 f6       	brne	.-118    	; 0x110 <controlMotor+0x14>
 186:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 18a:	21 30       	cpi	r18, 0x01	; 1
 18c:	09 f6       	brne	.-126    	; 0x110 <controlMotor+0x14>
				if(channelA > MIN_PWM_SPEED){
 18e:	85 36       	cpi	r24, 0x65	; 101
 190:	91 05       	cpc	r25, r1
 192:	30 f0       	brcs	.+12     	; 0x1a0 <controlMotor+0xa4>
					channelA -= BREAK_RATE;
 194:	4e 97       	sbiw	r24, 0x1e	; 30
				channelA -= SPEED_DECREASE_RATE;
 196:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <channelA+0x1>
 19a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <channelA>
 19e:	ec cf       	rjmp	.-40     	; 0x178 <controlMotor+0x7c>
					FORWARD_MODE();
 1a0:	88 b1       	in	r24, 0x08	; 8
 1a2:	85 60       	ori	r24, 0x05	; 5
 1a4:	88 b9       	out	0x08, r24	; 8
 1a6:	88 b1       	in	r24, 0x08	; 8
 1a8:	85 7f       	andi	r24, 0xF5	; 245
 1aa:	88 b9       	out	0x08, r24	; 8
					channelA_status = FORWARD;
 1ac:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <channelA_status>
					channelB_status = FORWARD;
 1b0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 1b4:	ad cf       	rjmp	.-166    	; 0x110 <controlMotor+0x14>
			if(channelA_status == REVERSE && channelB_status == REVERSE){
 1b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <channelA_status>
 1ba:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <channelA>
 1be:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <channelA+0x1>
 1c2:	91 30       	cpi	r25, 0x01	; 1
 1c4:	81 f4       	brne	.+32     	; 0x1e6 <controlMotor+0xea>
 1c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	09 f0       	breq	.+2      	; 0x1d0 <controlMotor+0xd4>
 1ce:	a0 cf       	rjmp	.-192    	; 0x110 <controlMotor+0x14>
				(channelA == MAX_PWM_SPEED) ? (channelA = MAX_PWM_SPEED) : (channelA += SPEED_INCREASE_RATE);
 1d0:	20 32       	cpi	r18, 0x20	; 32
 1d2:	8e e4       	ldi	r24, 0x4E	; 78
 1d4:	38 07       	cpc	r19, r24
 1d6:	61 f2       	breq	.-104    	; 0x170 <controlMotor+0x74>
 1d8:	26 5f       	subi	r18, 0xF6	; 246
 1da:	3f 4f       	sbci	r19, 0xFF	; 255
 1dc:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <channelA+0x1>
 1e0:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <channelA>
 1e4:	c5 cf       	rjmp	.-118    	; 0x170 <controlMotor+0x74>
			}else if(channelA_status == FORWARD && channelB_status == FORWARD){
 1e6:	91 11       	cpse	r25, r1
 1e8:	93 cf       	rjmp	.-218    	; 0x110 <controlMotor+0x14>
 1ea:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 1ee:	91 11       	cpse	r25, r1
 1f0:	8f cf       	rjmp	.-226    	; 0x110 <controlMotor+0x14>
				if(channelA > MIN_PWM_SPEED){
 1f2:	25 36       	cpi	r18, 0x65	; 101
 1f4:	31 05       	cpc	r19, r1
 1f6:	58 f0       	brcs	.+22     	; 0x20e <controlMotor+0x112>
					channelA -= BREAK_RATE;
 1f8:	2e 51       	subi	r18, 0x1E	; 30
 1fa:	31 09       	sbc	r19, r1
 1fc:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <channelA+0x1>
 200:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <channelA>
					channelB = channelA;
 204:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <channelB+0x1>
 208:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <channelB>
 20c:	81 cf       	rjmp	.-254    	; 0x110 <controlMotor+0x14>
					REVERSE_MODE();
 20e:	98 b1       	in	r25, 0x08	; 8
 210:	9a 60       	ori	r25, 0x0A	; 10
 212:	98 b9       	out	0x08, r25	; 8
 214:	98 b1       	in	r25, 0x08	; 8
 216:	9a 7f       	andi	r25, 0xFA	; 250
 218:	98 b9       	out	0x08, r25	; 8
					channelA_status = REVERSE;
 21a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <channelA_status>
					channelB_status = REVERSE;
 21e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 222:	76 cf       	rjmp	.-276    	; 0x110 <controlMotor+0x14>
			channelA = 0x00;
 224:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <channelA+0x1>
 228:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <channelA>
			channelB = 0x00;
 22c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <channelB+0x1>
 230:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <channelB>
			break;
 234:	6d cf       	rjmp	.-294    	; 0x110 <controlMotor+0x14>
			if(channelA > MIN_PWM_SPEED){
 236:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <channelA>
 23a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <channelA+0x1>
 23e:	85 36       	cpi	r24, 0x65	; 101
 240:	91 05       	cpc	r25, r1
 242:	08 f4       	brcc	.+2      	; 0x246 <controlMotor+0x14a>
 244:	65 cf       	rjmp	.-310    	; 0x110 <controlMotor+0x14>
				channelA -= SPEED_DECREASE_RATE;
 246:	05 97       	sbiw	r24, 0x05	; 5
 248:	a6 cf       	rjmp	.-180    	; 0x196 <controlMotor+0x9a>

0000024a <main>:
	setupPWM();
 24a:	0e 94 48 00 	call	0x90	; 0x90 <setupPWM>
	initUSART();
 24e:	0e 94 62 00 	call	0xc4	; 0xc4 <initUSART>
	MOTOR_DDR = 0x0F;
 252:	8f e0       	ldi	r24, 0x0F	; 15
 254:	87 b9       	out	0x07, r24	; 7
	ICR1 = period;
 256:	80 e2       	ldi	r24, 0x20	; 32
 258:	9e e4       	ldi	r25, 0x4E	; 78
 25a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 25e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 262:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 266:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	ICR1 = period;
 26a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 26e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 272:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 276:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		uint8_t input = getCh();
 27a:	0e 94 70 00 	call	0xe0	; 0xe0 <getCh>
		if(input == 'u')
 27e:	85 37       	cpi	r24, 0x75	; 117
 280:	21 f4       	brne	.+8      	; 0x28a <main+0x40>
			controlMotor(FORWARD);
 282:	80 e0       	ldi	r24, 0x00	; 0
			controlMotor(NEUTRAL);
 284:	0e 94 7e 00 	call	0xfc	; 0xfc <controlMotor>
 288:	f8 cf       	rjmp	.-16     	; 0x27a <main+0x30>
		else if(input == 'd')
 28a:	84 36       	cpi	r24, 0x64	; 100
 28c:	11 f4       	brne	.+4      	; 0x292 <main+0x48>
			controlMotor(REVERSE);
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	f9 cf       	rjmp	.-14     	; 0x284 <main+0x3a>
		else if(input == 's')
 292:	83 37       	cpi	r24, 0x73	; 115
 294:	11 f4       	brne	.+4      	; 0x29a <main+0x50>
			controlMotor(STOP);
 296:	84 e0       	ldi	r24, 0x04	; 4
 298:	f5 cf       	rjmp	.-22     	; 0x284 <main+0x3a>
		else if(input == 'n')
 29a:	8e 36       	cpi	r24, 0x6E	; 110
 29c:	71 f7       	brne	.-36     	; 0x27a <main+0x30>
			controlMotor(NEUTRAL);
 29e:	85 e0       	ldi	r24, 0x05	; 5
 2a0:	f1 cf       	rjmp	.-30     	; 0x284 <main+0x3a>

000002a2 <_exit>:
 2a2:	f8 94       	cli

000002a4 <__stop_program>:
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <__stop_program>
