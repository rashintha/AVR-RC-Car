   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	setupPWM
  12               	setupPWM:
  13               	.LFB6:
  14               		.file 1 "pwm.h"
   1:pwm.h         **** #include <avr/io.h>
   2:pwm.h         **** #include "cpu_def.h"
   3:pwm.h         **** 
   4:pwm.h         **** //Define PWM Channels
   5:pwm.h         **** #define CH_A 0
   6:pwm.h         **** #define CH_B 1
   7:pwm.h         **** 
   8:pwm.h         **** void setupPWM(void);
   9:pwm.h         **** void pwm(uint8_t channel, uint16_t onTime, uint16_t period);
  10:pwm.h         **** 
  11:pwm.h         **** //Initializing PWM
  12:pwm.h         **** void setupPWM(void){
  15               		.loc 1 12 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  13:pwm.h         **** 	OC1x_DDR |= (1 << OC1A_PIN) | (1 << OC1B_PIN);
  21               		.loc 1 13 0
  22 0000 84B1      		in r24,0x4
  23 0002 8660      		ori r24,lo8(6)
  24 0004 84B9      		out 0x4,r24
  14:pwm.h         **** 	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);	
  25               		.loc 1 14 0
  26 0006 82EA      		ldi r24,lo8(-94)
  27 0008 8093 8000 		sts 128,r24
  15:pwm.h         **** 	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
  28               		.loc 1 15 0
  29 000c 8AE1      		ldi r24,lo8(26)
  30 000e 8093 8100 		sts 129,r24
  31               	/* epilogue start */
  16:pwm.h         **** }
  32               		.loc 1 16 0
  33 0012 0895      		ret
  34               		.cfi_endproc
  35               	.LFE6:
  37               	.global	pwm
  39               	pwm:
  40               	.LFB7:
  17:pwm.h         **** 
  18:pwm.h         **** //Set PWM of the selected channel
  19:pwm.h         **** void pwm(uint8_t channel, uint16_t onTime, uint16_t period){
  41               		.loc 1 19 0
  42               		.cfi_startproc
  43               	.LVL0:
  44               	/* prologue: function */
  45               	/* frame size = 0 */
  46               	/* stack size = 0 */
  47               	.L__stack_usage = 0
  20:pwm.h         **** 	ICR1 = period;
  48               		.loc 1 20 0
  49 0014 5093 8700 		sts 134+1,r21
  50 0018 4093 8600 		sts 134,r20
  21:pwm.h         **** 	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
  51               		.loc 1 21 0
  52 001c 8130      		cpi r24,lo8(1)
  53 001e 01F4      		brne .L3
  54               		.loc 1 21 0 is_stmt 0 discriminator 1
  55 0020 7093 8B00 		sts 138+1,r23
  56 0024 6093 8A00 		sts 138,r22
  57 0028 0895      		ret
  58               	.L3:
  59               		.loc 1 21 0 discriminator 2
  60 002a 7093 8900 		sts 136+1,r23
  61 002e 6093 8800 		sts 136,r22
  62               	/* epilogue start */
  22:pwm.h         **** }...
  63               		.loc 1 22 0 is_stmt 1 discriminator 2
  64 0032 0895      		ret
  65               		.cfi_endproc
  66               	.LFE7:
  68               	.global	initUSART
  70               	initUSART:
  71               	.LFB8:
  72               		.file 2 "serial.h"
   1:serial.h      **** #define BAUD_RATE 9600
   2:serial.h      **** 
   3:serial.h      **** #include <avr/io.h>
   4:serial.h      **** #include "cpu_def.h"
   5:serial.h      **** 
   6:serial.h      **** void initUSART(void);
   7:serial.h      **** uint8_t getCh(void);
   8:serial.h      **** void putCh(uint8_t data);
   9:serial.h      **** 
  10:serial.h      **** void initUSART(void){
  73               		.loc 2 10 0
  74               		.cfi_startproc
  75               	/* prologue: function */
  76               	/* frame size = 0 */
  77               	/* stack size = 0 */
  78               	.L__stack_usage = 0
  79               	.LVL1:
  11:serial.h      ****    //Set Baud rate; ubrr_value = F_OSC/(16 x Baud_rate) - 1; e.g. 16e6/(9600*16) -1 = 103
  12:serial.h      **** 	uint32_t ubrr_value;
  13:serial.h      **** 	ubrr_value = F_CPU/16/BAUD_RATE -1; 
  14:serial.h      **** 	UBRRL_REG = ubrr_value;
  80               		.loc 2 14 0
  81 0034 87E6      		ldi r24,lo8(103)
  82 0036 8093 C400 		sts 196,r24
  15:serial.h      **** 	UBRRH_REG = (ubrr_value >> 8);
  83               		.loc 2 15 0
  84 003a 1092 C500 		sts 197,__zero_reg__
  16:serial.h      **** 	UCSRC_REG |= (1 << UCSZ1_BIT) | (1 << UCSZ0_BIT);
  85               		.loc 2 16 0
  86 003e E2EC      		ldi r30,lo8(-62)
  87 0040 F0E0      		ldi r31,0
  88 0042 8081      		ld r24,Z
  89 0044 8660      		ori r24,lo8(6)
  90 0046 8083      		st Z,r24
  17:serial.h      **** 
  18:serial.h      **** 	#ifdef ATMEGA_32A
  19:serial.h      **** 	UCSRC_REG |= (1 << URSEL_BIT);
  20:serial.h      **** 	#endif
  21:serial.h      **** 
  22:serial.h      **** 	//Enable The receiver and transmitter
  23:serial.h      **** 	UCSRB_REG = (1 << RXEN_BIT) | (1 << TXEN_BIT);
  91               		.loc 2 23 0
  92 0048 88E1      		ldi r24,lo8(24)
  93 004a 8093 C100 		sts 193,r24
  94               	/* epilogue start */
  24:serial.h      **** }
  95               		.loc 2 24 0
  96 004e 0895      		ret
  97               		.cfi_endproc
  98               	.LFE8:
 100               	.global	getCh
 102               	getCh:
 103               	.LFB9:
  25:serial.h      **** 
  26:serial.h      **** uint8_t getCh(void){
 104               		.loc 2 26 0
 105               		.cfi_startproc
 106               	/* prologue: function */
 107               	/* frame size = 0 */
 108               	/* stack size = 0 */
 109               	.L__stack_usage = 0
 110               	.L7:
  27:serial.h      **** 	while(!(UCSRA_REG & (1 << RXC_BIT)));
 111               		.loc 2 27 0 discriminator 1
 112 0050 8091 C000 		lds r24,192
 113 0054 87FF      		sbrs r24,7
 114 0056 00C0      		rjmp .L7
  28:serial.h      **** 	return UDR_REG;
 115               		.loc 2 28 0
 116 0058 8091 C600 		lds r24,198
 117               	/* epilogue start */
  29:serial.h      **** }
 118               		.loc 2 29 0
 119 005c 0895      		ret
 120               		.cfi_endproc
 121               	.LFE9:
 123               	.global	putCh
 125               	putCh:
 126               	.LFB10:
  30:serial.h      **** 
  31:serial.h      **** void putCh(uint8_t data){
 127               		.loc 2 31 0
 128               		.cfi_startproc
 129               	/* prologue: function */
 130               	/* frame size = 0 */
 131               	/* stack size = 0 */
 132               	.L__stack_usage = 0
 133               	.LVL2:
 134               	.L10:
  32:serial.h      **** 	while(!(UCSRA_REG & (1 << UDRE_BIT)));
 135               		.loc 2 32 0 discriminator 1
 136 005e 9091 C000 		lds r25,192
 137 0062 95FF      		sbrs r25,5
 138 0064 00C0      		rjmp .L10
  33:serial.h      **** 	UDR_REG = data;
 139               		.loc 2 33 0
 140 0066 8093 C600 		sts 198,r24
 141               	/* epilogue start */
  34:serial.h      **** }...
 142               		.loc 2 34 0
 143 006a 0895      		ret
 144               		.cfi_endproc
 145               	.LFE10:
 147               	.global	controlMotor
 149               	controlMotor:
 150               	.LFB12:
 151               		.file 3 "main.c"
   1:main.c        **** #define F_CPU 16000000UL
   2:main.c        **** 
   3:main.c        **** #define FORWARD 0x00
   4:main.c        **** #define REVERSE	0x01
   5:main.c        **** #define RIGHT	0x02
   6:main.c        **** #define LEFT	0x03
   7:main.c        **** #define STOP 	0x04
   8:main.c        **** #define NEUTRAL	0x05
   9:main.c        **** 
  10:main.c        **** #define MOTOR_DDR	DDRC
  11:main.c        **** #define MOTOR_PORT	PORTC
  12:main.c        **** 
  13:main.c        **** #define MOTOR_RIGHT_FWD_PIN		PC0
  14:main.c        **** #define MOTOR_RIGHT_REV_PIN		PC1
  15:main.c        **** #define MOTOR_LEFT_FWD_PIN		PC2
  16:main.c        **** #define MOTOR_LEFT_REV_PIN		PC3
  17:main.c        **** 
  18:main.c        **** #define FORWARD_MODE() { MOTOR_PORT |= (1 << MOTOR_RIGHT_FWD_PIN) | (1 << MOTOR_LEFT_FWD_PIN); MOTO
  19:main.c        **** #define REVERSE_MODE() { MOTOR_PORT |= (1 << MOTOR_RIGHT_REV_PIN) | (1 << MOTOR_LEFT_REV_PIN); MOTO
  20:main.c        **** #define RIGHT_MODE()   { MOTOR_PORT |= (1 << MOTOR_RIGHT_REV_PIN) | (1 << MOTOR_LEFT_FWD_PIN); MOTO
  21:main.c        **** #define LEFT_MODE()    { MOTOR_PORT |= (1 << MOTOR_RIGHT_FWD_PIN) | (1 << MOTOR_LEFT_REV_PIN); MOTO
  22:main.c        **** 
  23:main.c        **** #define MAX_PWM_SPEED	20000
  24:main.c        **** #define MIN_PWM_SPEED	100
  25:main.c        **** 
  26:main.c        **** #define SPEED_INCREASE_RATE		10
  27:main.c        **** #define SPEED_DECREASE_RATE		5
  28:main.c        **** #define BREAK_RATE				30
  29:main.c        **** 
  30:main.c        **** //Comment the MCU which you're not using.
  31:main.c        **** #define ATMEGA_328P
  32:main.c        **** //#define ATMEGA_32A
  33:main.c        **** 
  34:main.c        **** #include <avr/io.h>
  35:main.c        **** #include <util/delay.h>
  36:main.c        **** #include "pwm.h"
  37:main.c        **** #include "serial.h"
  38:main.c        **** 
  39:main.c        **** void controlMotor(uint8_t status);
  40:main.c        **** 
  41:main.c        **** uint16_t channelA = 0, channelB = 0;
  42:main.c        **** uint8_t channelA_status = FORWARD, channelB_status = FORWARD;
  43:main.c        **** 
  44:main.c        **** int main(void){
  45:main.c        **** 
  46:main.c        **** 	setupPWM();
  47:main.c        **** 	initUSART();
  48:main.c        **** 
  49:main.c        **** 	MOTOR_DDR = 0x0F;
  50:main.c        **** 
  51:main.c        **** 	pwm(CH_A, 0, MAX_PWM_SPEED);
  52:main.c        **** 	pwm(CH_B, 0, MAX_PWM_SPEED);
  53:main.c        **** 
  54:main.c        **** 	while(1){
  55:main.c        **** 		uint8_t input = getCh();
  56:main.c        **** 
  57:main.c        **** 		//putCh(input);
  58:main.c        **** 
  59:main.c        **** 		if(input == 'u')
  60:main.c        **** 			controlMotor(FORWARD);
  61:main.c        **** 		else if(input == 'd')
  62:main.c        **** 			controlMotor(REVERSE);
  63:main.c        **** 		else if(input == 's')
  64:main.c        **** 			controlMotor(STOP);
  65:main.c        **** 		else if(input == 'n')
  66:main.c        **** 			controlMotor(NEUTRAL);
  67:main.c        **** 		else if(input == 'l')
  68:main.c        **** 			controlMotor(LEFT);
  69:main.c        **** 		else if(input == 'r')
  70:main.c        **** 			controlMotor(RIGHT);
  71:main.c        **** 	}
  72:main.c        **** 	
  73:main.c        **** 	return 0;
  74:main.c        **** }
  75:main.c        **** 
  76:main.c        **** void controlMotor(uint8_t status){
 152               		.loc 3 76 0
 153               		.cfi_startproc
 154               	.LVL3:
 155               	/* prologue: function */
 156               	/* frame size = 0 */
 157               	/* stack size = 0 */
 158               	.L__stack_usage = 0
  77:main.c        **** 	switch(status){
 159               		.loc 3 77 0
 160 006c 8230      		cpi r24,lo8(2)
 161 006e 01F4      		brne .+2
 162 0070 00C0      		rjmp .L15
 163 0072 00F4      		brsh .L16
 164 0074 2091 0000 		lds r18,channelA
 165 0078 3091 0000 		lds r19,channelA+1
 166 007c 8823      		tst r24
 167 007e 01F4      		brne .+2
 168 0080 00C0      		rjmp .L17
 169 0082 8130      		cpi r24,lo8(1)
 170 0084 01F4      		brne .+2
 171 0086 00C0      		rjmp .L18
 172               	.LVL4:
 173               	.L14:
  78:main.c        **** 		case FORWARD:
  79:main.c        **** 			if(channelA_status == FORWARD && channelB_status == FORWARD){
  80:main.c        **** 				(channelA == MAX_PWM_SPEED) ? (channelA = MAX_PWM_SPEED) : (channelA += SPEED_INCREASE_RATE);
  81:main.c        **** 				channelB = channelA;
  82:main.c        **** 			}else if(channelA_status == REVERSE && channelB_status == REVERSE){
  83:main.c        **** 				if(channelA > MIN_PWM_SPEED){
  84:main.c        **** 					channelA -= BREAK_RATE;
  85:main.c        **** 					channelB = channelA;
  86:main.c        **** 				}else{
  87:main.c        **** 					FORWARD_MODE();
  88:main.c        **** 					channelA_status = FORWARD;
  89:main.c        **** 					channelB_status = FORWARD;
  90:main.c        **** 				}
  91:main.c        **** 			}
  92:main.c        **** 			break;
  93:main.c        **** 		
  94:main.c        **** 		case REVERSE:
  95:main.c        **** 			if(channelA_status == REVERSE && channelB_status == REVERSE){
  96:main.c        **** 				(channelA == MAX_PWM_SPEED) ? (channelA = MAX_PWM_SPEED) : (channelA += SPEED_INCREASE_RATE);
  97:main.c        **** 				channelB = channelA;
  98:main.c        **** 			}else if(channelA_status == FORWARD && channelB_status == FORWARD){
  99:main.c        **** 				if(channelA > MIN_PWM_SPEED){
 100:main.c        **** 					channelA -= BREAK_RATE;
 101:main.c        **** 					channelB = channelA;
 102:main.c        **** 				}else{
 103:main.c        **** 					REVERSE_MODE();
 104:main.c        **** 					channelA_status = REVERSE;
 105:main.c        **** 					channelB_status = REVERSE;
 106:main.c        **** 				}
 107:main.c        **** 			}
 108:main.c        **** 			break;
 109:main.c        **** 		
 110:main.c        **** 		case STOP:
 111:main.c        **** 			channelA = 0x00;
 112:main.c        **** 			channelB = 0x00;
 113:main.c        **** 			break;
 114:main.c        **** 
 115:main.c        **** 		case NEUTRAL:
 116:main.c        **** 			if(channelA > MIN_PWM_SPEED){
 117:main.c        **** 				channelA -= SPEED_DECREASE_RATE;
 118:main.c        **** 				channelB = channelA;
 119:main.c        **** 			}
 120:main.c        **** 
 121:main.c        **** 			if(channelB_status == FORWARD && channelB_status == FORWARD)
 122:main.c        **** 				FORWARD_MODE()
 123:main.c        **** 			else
 124:main.c        **** 				REVERSE_MODE()
 125:main.c        **** 			break;
 126:main.c        **** 
 127:main.c        **** 		case RIGHT:
 128:main.c        **** 			RIGHT_MODE();
 129:main.c        **** 			break;
 130:main.c        **** 
 131:main.c        **** 		case LEFT:
 132:main.c        **** 			LEFT_MODE();
 133:main.c        **** 			break;
 134:main.c        **** 	}
 135:main.c        **** 
 136:main.c        **** 	pwm(CH_A, channelA, MAX_PWM_SPEED);
 174               		.loc 3 136 0
 175 0088 2091 0000 		lds r18,channelA
 176 008c 3091 0000 		lds r19,channelA+1
 177               	.LVL5:
 178               	.LBB11:
 179               	.LBB12:
  20:pwm.h         **** 	ICR1 = period;
 180               		.loc 1 20 0
 181 0090 80E2      		ldi r24,lo8(32)
 182 0092 9EE4      		ldi r25,lo8(78)
 183 0094 9093 8700 		sts 134+1,r25
 184 0098 8093 8600 		sts 134,r24
  21:pwm.h         **** 	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 185               		.loc 1 21 0
 186 009c 3093 8900 		sts 136+1,r19
 187 00a0 2093 8800 		sts 136,r18
 188               	.LVL6:
 189               	.LBE12:
 190               	.LBE11:
 137:main.c        **** 	pwm(CH_B, channelB, MAX_PWM_SPEED);
 191               		.loc 3 137 0
 192 00a4 2091 0000 		lds r18,channelB
 193 00a8 3091 0000 		lds r19,channelB+1
 194               	.LVL7:
 195               	.LBB13:
 196               	.LBB14:
  20:pwm.h         **** 	ICR1 = period;
 197               		.loc 1 20 0
 198 00ac 9093 8700 		sts 134+1,r25
 199 00b0 8093 8600 		sts 134,r24
  21:pwm.h         **** 	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 200               		.loc 1 21 0
 201 00b4 3093 8B00 		sts 138+1,r19
 202 00b8 2093 8A00 		sts 138,r18
 203               	.LVL8:
 204               	/* epilogue start */
 205               	.LBE14:
 206               	.LBE13:
 138:main.c        **** }...
 207               		.loc 3 138 0
 208 00bc 0895      		ret
 209               	.LVL9:
 210               	.L16:
  77:main.c        **** 	switch(status){
 211               		.loc 3 77 0
 212 00be 8430      		cpi r24,lo8(4)
 213 00c0 01F4      		brne .+2
 214 00c2 00C0      		rjmp .L19
 215 00c4 00F4      		brsh .+2
 216 00c6 00C0      		rjmp .L20
 217 00c8 8530      		cpi r24,lo8(5)
 218 00ca 01F4      		brne .L14
 116:main.c        **** 			if(channelA > MIN_PWM_SPEED){
 219               		.loc 3 116 0
 220 00cc 8091 0000 		lds r24,channelA
 221 00d0 9091 0000 		lds r25,channelA+1
 222               	.LVL10:
 223 00d4 8536      		cpi r24,101
 224 00d6 9105      		cpc r25,__zero_reg__
 225 00d8 00F0      		brlo .L28
 117:main.c        **** 				channelA -= SPEED_DECREASE_RATE;
 226               		.loc 3 117 0
 227 00da 0597      		sbiw r24,5
 228 00dc 9093 0000 		sts channelA+1,r25
 229 00e0 8093 0000 		sts channelA,r24
 118:main.c        **** 				channelB = channelA;
 230               		.loc 3 118 0
 231 00e4 9093 0000 		sts channelB+1,r25
 232 00e8 8093 0000 		sts channelB,r24
 233               	.L28:
 121:main.c        **** 			if(channelB_status == FORWARD && channelB_status == FORWARD)
 234               		.loc 3 121 0
 235 00ec 8091 0000 		lds r24,channelB_status
 236 00f0 8111      		cpse r24,__zero_reg__
 237 00f2 00C0      		rjmp .L29
 122:main.c        **** 				FORWARD_MODE()
 238               		.loc 3 122 0
 239 00f4 88B1      		in r24,0x8
 240 00f6 8560      		ori r24,lo8(5)
 241 00f8 88B9      		out 0x8,r24
 242 00fa 88B1      		in r24,0x8
 243 00fc 857F      		andi r24,lo8(-11)
 244               	.L36:
 132:main.c        **** 			LEFT_MODE();
 245               		.loc 3 132 0
 246 00fe 88B9      		out 0x8,r24
 133:main.c        **** 			break;
 247               		.loc 3 133 0
 248 0100 00C0      		rjmp .L14
 249               	.LVL11:
 250               	.L17:
  79:main.c        **** 			if(channelA_status == FORWARD && channelB_status == FORWARD){
 251               		.loc 3 79 0
 252 0102 8091 0000 		lds r24,channelA_status
 253               	.LVL12:
 254 0106 8111      		cpse r24,__zero_reg__
 255 0108 00C0      		rjmp .L22
  79:main.c        **** 			if(channelA_status == FORWARD && channelB_status == FORWARD){
 256               		.loc 3 79 0 is_stmt 0 discriminator 1
 257 010a 8091 0000 		lds r24,channelB_status
 258 010e 8111      		cpse r24,__zero_reg__
 259 0110 00C0      		rjmp .L14
 260               	.L39:
  96:main.c        **** 				(channelA == MAX_PWM_SPEED) ? (channelA = MAX_PWM_SPEED) : (channelA += SPEED_INCREASE_RATE);
 261               		.loc 3 96 0 is_stmt 1
 262 0112 2032      		cpi r18,32
 263 0114 8EE4      		ldi r24,78
 264 0116 3807      		cpc r19,r24
 265 0118 01F0      		breq .L26
  96:main.c        **** 				(channelA == MAX_PWM_SPEED) ? (channelA = MAX_PWM_SPEED) : (channelA += SPEED_INCREASE_RATE);
 266               		.loc 3 96 0 is_stmt 0 discriminator 2
 267 011a 265F      		subi r18,-10
 268 011c 3F4F      		sbci r19,-1
 269 011e 3093 0000 		sts channelA+1,r19
 270 0122 2093 0000 		sts channelA,r18
 271               	.L26:
  97:main.c        **** 				channelB = channelA;
 272               		.loc 3 97 0 is_stmt 1
 273 0126 8091 0000 		lds r24,channelA
 274 012a 9091 0000 		lds r25,channelA+1
 275 012e 9093 0000 		sts channelB+1,r25
 276 0132 8093 0000 		sts channelB,r24
 277 0136 00C0      		rjmp .L14
 278               	.L22:
  82:main.c        **** 			}else if(channelA_status == REVERSE && channelB_status == REVERSE){
 279               		.loc 3 82 0
 280 0138 8130      		cpi r24,lo8(1)
 281 013a 01F0      		breq .+2
 282 013c 00C0      		rjmp .L14
  82:main.c        **** 			}else if(channelA_status == REVERSE && channelB_status == REVERSE){
 283               		.loc 3 82 0 is_stmt 0 discriminator 1
 284 013e 8091 0000 		lds r24,channelB_status
 285 0142 8130      		cpi r24,lo8(1)
 286 0144 01F0      		breq .+2
 287 0146 00C0      		rjmp .L14
  83:main.c        **** 				if(channelA > MIN_PWM_SPEED){
 288               		.loc 3 83 0 is_stmt 1
 289 0148 2536      		cpi r18,101
 290 014a 3105      		cpc r19,__zero_reg__
 291 014c 00F0      		brlo .L24
 292               	.L37:
 100:main.c        **** 					channelA -= BREAK_RATE;
 293               		.loc 3 100 0
 294 014e 2E51      		subi r18,30
 295 0150 3109      		sbc r19,__zero_reg__
 296 0152 3093 0000 		sts channelA+1,r19
 297 0156 2093 0000 		sts channelA,r18
 101:main.c        **** 					channelB = channelA;
 298               		.loc 3 101 0
 299 015a 3093 0000 		sts channelB+1,r19
 300 015e 2093 0000 		sts channelB,r18
 301 0162 00C0      		rjmp .L14
 302               	.L24:
  87:main.c        **** 					FORWARD_MODE();
 303               		.loc 3 87 0
 304 0164 88B1      		in r24,0x8
 305 0166 8560      		ori r24,lo8(5)
 306 0168 88B9      		out 0x8,r24
 307 016a 88B1      		in r24,0x8
 308 016c 857F      		andi r24,lo8(-11)
 309 016e 88B9      		out 0x8,r24
  88:main.c        **** 					channelA_status = FORWARD;
 310               		.loc 3 88 0
 311 0170 1092 0000 		sts channelA_status,__zero_reg__
  89:main.c        **** 					channelB_status = FORWARD;
 312               		.loc 3 89 0
 313 0174 1092 0000 		sts channelB_status,__zero_reg__
 314 0178 00C0      		rjmp .L14
 315               	.LVL13:
 316               	.L18:
  95:main.c        **** 			if(channelA_status == REVERSE && channelB_status == REVERSE){
 317               		.loc 3 95 0
 318 017a 9091 0000 		lds r25,channelA_status
 319 017e 9130      		cpi r25,lo8(1)
 320 0180 01F4      		brne .L25
  95:main.c        **** 			if(channelA_status == REVERSE && channelB_status == REVERSE){
 321               		.loc 3 95 0 is_stmt 0 discriminator 1
 322 0182 8091 0000 		lds r24,channelB_status
 323               	.LVL14:
 324 0186 8130      		cpi r24,lo8(1)
 325 0188 01F0      		breq .+2
 326 018a 00C0      		rjmp .L14
 327 018c 00C0      		rjmp .L39
 328               	.LVL15:
 329               	.L25:
  98:main.c        **** 			}else if(channelA_status == FORWARD && channelB_status == FORWARD){
 330               		.loc 3 98 0 is_stmt 1
 331 018e 9111      		cpse r25,__zero_reg__
 332 0190 00C0      		rjmp .L14
  98:main.c        **** 			}else if(channelA_status == FORWARD && channelB_status == FORWARD){
 333               		.loc 3 98 0 is_stmt 0 discriminator 1
 334 0192 9091 0000 		lds r25,channelB_status
 335 0196 9111      		cpse r25,__zero_reg__
 336 0198 00C0      		rjmp .L14
  99:main.c        **** 				if(channelA > MIN_PWM_SPEED){
 337               		.loc 3 99 0 is_stmt 1
 338 019a 2536      		cpi r18,101
 339 019c 3105      		cpc r19,__zero_reg__
 340 019e 00F4      		brsh .L37
 103:main.c        **** 					REVERSE_MODE();
 341               		.loc 3 103 0
 342 01a0 98B1      		in r25,0x8
 343 01a2 9A60      		ori r25,lo8(10)
 344 01a4 98B9      		out 0x8,r25
 345 01a6 98B1      		in r25,0x8
 346 01a8 9A7F      		andi r25,lo8(-6)
 347 01aa 98B9      		out 0x8,r25
 104:main.c        **** 					channelA_status = REVERSE;
 348               		.loc 3 104 0
 349 01ac 8093 0000 		sts channelA_status,r24
 105:main.c        **** 					channelB_status = REVERSE;
 350               		.loc 3 105 0
 351 01b0 8093 0000 		sts channelB_status,r24
 352 01b4 00C0      		rjmp .L14
 353               	.L19:
 111:main.c        **** 			channelA = 0x00;
 354               		.loc 3 111 0
 355 01b6 1092 0000 		sts channelA+1,__zero_reg__
 356 01ba 1092 0000 		sts channelA,__zero_reg__
 112:main.c        **** 			channelB = 0x00;
 357               		.loc 3 112 0
 358 01be 1092 0000 		sts channelB+1,__zero_reg__
 359 01c2 1092 0000 		sts channelB,__zero_reg__
 113:main.c        **** 			break;
 360               		.loc 3 113 0
 361 01c6 00C0      		rjmp .L14
 362               	.LVL16:
 363               	.L29:
 124:main.c        **** 				REVERSE_MODE()
 364               		.loc 3 124 0
 365 01c8 88B1      		in r24,0x8
 366 01ca 8A60      		ori r24,lo8(10)
 367 01cc 88B9      		out 0x8,r24
 368 01ce 88B1      		in r24,0x8
 369 01d0 8A7F      		andi r24,lo8(-6)
 370 01d2 00C0      		rjmp .L36
 371               	.LVL17:
 372               	.L15:
 128:main.c        **** 			RIGHT_MODE();
 373               		.loc 3 128 0
 374 01d4 88B1      		in r24,0x8
 375               	.LVL18:
 376 01d6 8660      		ori r24,lo8(6)
 377 01d8 88B9      		out 0x8,r24
 378 01da 88B1      		in r24,0x8
 379 01dc 867F      		andi r24,lo8(-10)
 380 01de 00C0      		rjmp .L36
 381               	.LVL19:
 382               	.L20:
 132:main.c        **** 			LEFT_MODE();
 383               		.loc 3 132 0
 384 01e0 88B1      		in r24,0x8
 385               	.LVL20:
 386 01e2 8960      		ori r24,lo8(9)
 387 01e4 88B9      		out 0x8,r24
 388 01e6 88B1      		in r24,0x8
 389 01e8 897F      		andi r24,lo8(-7)
 390 01ea 00C0      		rjmp .L36
 391               		.cfi_endproc
 392               	.LFE12:
 394               		.section	.text.startup,"ax",@progbits
 395               	.global	main
 397               	main:
 398               	.LFB11:
  44:main.c        **** int main(void){
 399               		.loc 3 44 0
 400               		.cfi_startproc
 401               	/* prologue: function */
 402               	/* frame size = 0 */
 403               	/* stack size = 0 */
 404               	.L__stack_usage = 0
  46:main.c        **** 	setupPWM();
 405               		.loc 3 46 0
 406 0000 0E94 0000 		call setupPWM
 407               	.LVL21:
  47:main.c        **** 	initUSART();
 408               		.loc 3 47 0
 409 0004 0E94 0000 		call initUSART
 410               	.LVL22:
  49:main.c        **** 	MOTOR_DDR = 0x0F;
 411               		.loc 3 49 0
 412 0008 8FE0      		ldi r24,lo8(15)
 413 000a 87B9      		out 0x7,r24
 414               	.LVL23:
 415               	.LBB15:
 416               	.LBB16:
  20:pwm.h         **** 	ICR1 = period;
 417               		.loc 1 20 0
 418 000c 80E2      		ldi r24,lo8(32)
 419 000e 9EE4      		ldi r25,lo8(78)
 420 0010 9093 8700 		sts 134+1,r25
 421 0014 8093 8600 		sts 134,r24
  21:pwm.h         **** 	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 422               		.loc 1 21 0
 423 0018 1092 8900 		sts 136+1,__zero_reg__
 424 001c 1092 8800 		sts 136,__zero_reg__
 425               	.LVL24:
 426               	.LBE16:
 427               	.LBE15:
 428               	.LBB17:
 429               	.LBB18:
  20:pwm.h         **** 	ICR1 = period;
 430               		.loc 1 20 0
 431 0020 9093 8700 		sts 134+1,r25
 432 0024 8093 8600 		sts 134,r24
  21:pwm.h         **** 	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 433               		.loc 1 21 0
 434 0028 1092 8B00 		sts 138+1,__zero_reg__
 435 002c 1092 8A00 		sts 138,__zero_reg__
 436               	.L41:
 437               	.LBE18:
 438               	.LBE17:
 439               	.LBB19:
  55:main.c        **** 		uint8_t input = getCh();
 440               		.loc 3 55 0
 441 0030 0E94 0000 		call getCh
 442               	.LVL25:
  59:main.c        **** 		if(input == 'u')
 443               		.loc 3 59 0
 444 0034 8537      		cpi r24,lo8(117)
 445 0036 01F4      		brne .L42
  60:main.c        **** 			controlMotor(FORWARD);
 446               		.loc 3 60 0
 447 0038 80E0      		ldi r24,0
 448               	.LVL26:
 449               	.L48:
  70:main.c        **** 			controlMotor(RIGHT);
 450               		.loc 3 70 0
 451 003a 0E94 0000 		call controlMotor
 452               	.LVL27:
 453 003e 00C0      		rjmp .L41
 454               	.LVL28:
 455               	.L42:
  61:main.c        **** 		else if(input == 'd')
 456               		.loc 3 61 0
 457 0040 8436      		cpi r24,lo8(100)
 458 0042 01F4      		brne .L44
  62:main.c        **** 			controlMotor(REVERSE);
 459               		.loc 3 62 0
 460 0044 81E0      		ldi r24,lo8(1)
 461               	.LVL29:
 462 0046 00C0      		rjmp .L48
 463               	.LVL30:
 464               	.L44:
  63:main.c        **** 		else if(input == 's')
 465               		.loc 3 63 0
 466 0048 8337      		cpi r24,lo8(115)
 467 004a 01F4      		brne .L45
  64:main.c        **** 			controlMotor(STOP);
 468               		.loc 3 64 0
 469 004c 84E0      		ldi r24,lo8(4)
 470               	.LVL31:
 471 004e 00C0      		rjmp .L48
 472               	.LVL32:
 473               	.L45:
  65:main.c        **** 		else if(input == 'n')
 474               		.loc 3 65 0
 475 0050 8E36      		cpi r24,lo8(110)
 476 0052 01F4      		brne .L46
  66:main.c        **** 			controlMotor(NEUTRAL);
 477               		.loc 3 66 0
 478 0054 85E0      		ldi r24,lo8(5)
 479               	.LVL33:
 480 0056 00C0      		rjmp .L48
 481               	.LVL34:
 482               	.L46:
  67:main.c        **** 		else if(input == 'l')
 483               		.loc 3 67 0
 484 0058 8C36      		cpi r24,lo8(108)
 485 005a 01F4      		brne .L47
  68:main.c        **** 			controlMotor(LEFT);
 486               		.loc 3 68 0
 487 005c 83E0      		ldi r24,lo8(3)
 488               	.LVL35:
 489 005e 00C0      		rjmp .L48
 490               	.LVL36:
 491               	.L47:
  69:main.c        **** 		else if(input == 'r')
 492               		.loc 3 69 0
 493 0060 8237      		cpi r24,lo8(114)
 494 0062 01F4      		brne .L41
  70:main.c        **** 			controlMotor(RIGHT);
 495               		.loc 3 70 0
 496 0064 82E0      		ldi r24,lo8(2)
 497               	.LVL37:
 498 0066 00C0      		rjmp .L48
 499               	.LBE19:
 500               		.cfi_endproc
 501               	.LFE11:
 503               	.global	channelB_status
 504               		.section .bss
 507               	channelB_status:
 508 0000 00        		.zero	1
 509               	.global	channelA_status
 512               	channelA_status:
 513 0001 00        		.zero	1
 514               	.global	channelB
 517               	channelB:
 518 0002 0000      		.zero	2
 519               	.global	channelA
 522               	channelA:
 523 0004 0000      		.zero	2
 524               		.text
 525               	.Letext0:
 526               		.file 4 "/usr/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccnBAMj6.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccnBAMj6.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccnBAMj6.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccnBAMj6.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccnBAMj6.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccnBAMj6.s:12     .text:0000000000000000 setupPWM
     /tmp/ccnBAMj6.s:39     .text:0000000000000014 pwm
     /tmp/ccnBAMj6.s:70     .text:0000000000000034 initUSART
     /tmp/ccnBAMj6.s:102    .text:0000000000000050 getCh
     /tmp/ccnBAMj6.s:125    .text:000000000000005e putCh
     /tmp/ccnBAMj6.s:149    .text:000000000000006c controlMotor
     /tmp/ccnBAMj6.s:522    .bss:0000000000000004 channelA
     /tmp/ccnBAMj6.s:517    .bss:0000000000000002 channelB
     /tmp/ccnBAMj6.s:507    .bss:0000000000000000 channelB_status
     /tmp/ccnBAMj6.s:512    .bss:0000000000000001 channelA_status
     /tmp/ccnBAMj6.s:397    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
__do_clear_bss
