   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	setupPWM
  12               	setupPWM:
  13               	.LFB0:
  14               		.file 1 "pwm.h"
   1:pwm.h         **** #include <avr/io.h>
   2:pwm.h         **** 
   3:pwm.h         **** //Define PWM Channels
   4:pwm.h         **** #define CH_A 0
   5:pwm.h         **** #define CH_B 1
   6:pwm.h         **** 
   7:pwm.h         **** void setupPWM(void);
   8:pwm.h         **** void pwm(uint8_t channel, uint16_t onTime, uint16_t period);
   9:pwm.h         **** 
  10:pwm.h         **** //Initializing PWM
  11:pwm.h         **** void setupPWM(void){
  15               		.loc 1 11 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  12:pwm.h         **** 	DDRD |= (1 << PD4) | (1 << PD5);
  21               		.loc 1 12 0
  22 0000 8AB1      		in r24,0xa
  23 0002 8063      		ori r24,lo8(48)
  24 0004 8AB9      		out 0xa,r24
  13:pwm.h         **** 	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);	
  25               		.loc 1 13 0
  26 0006 82EA      		ldi r24,lo8(-94)
  27 0008 8093 8000 		sts 128,r24
  14:pwm.h         **** 	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
  28               		.loc 1 14 0
  29 000c 8AE1      		ldi r24,lo8(26)
  30 000e 8093 8100 		sts 129,r24
  31               	/* epilogue start */
  15:pwm.h         **** }
  32               		.loc 1 15 0
  33 0012 0895      		ret
  34               		.cfi_endproc
  35               	.LFE0:
  37               	.global	pwm
  39               	pwm:
  40               	.LFB1:
  16:pwm.h         **** 
  17:pwm.h         **** //Set PWM of the selected channel
  18:pwm.h         **** void pwm(uint8_t channel, uint16_t onTime, uint16_t period){
  41               		.loc 1 18 0
  42               		.cfi_startproc
  43               	.LVL0:
  44               	/* prologue: function */
  45               	/* frame size = 0 */
  46               	/* stack size = 0 */
  47               	.L__stack_usage = 0
  19:pwm.h         **** 	ICR1 = period;
  48               		.loc 1 19 0
  49 0014 5093 8700 		sts 134+1,r21
  50 0018 4093 8600 		sts 134,r20
  20:pwm.h         **** 	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
  51               		.loc 1 20 0
  52 001c 8130      		cpi r24,lo8(1)
  53 001e 01F4      		brne .L3
  54               		.loc 1 20 0 is_stmt 0 discriminator 1
  55 0020 7093 8B00 		sts 138+1,r23
  56 0024 6093 8A00 		sts 138,r22
  57 0028 0895      		ret
  58               	.L3:
  59               		.loc 1 20 0 discriminator 2
  60 002a 7093 8900 		sts 136+1,r23
  61 002e 6093 8800 		sts 136,r22
  62               	/* epilogue start */
  21:pwm.h         **** }...
  63               		.loc 1 21 0 is_stmt 1 discriminator 2
  64 0032 0895      		ret
  65               		.cfi_endproc
  66               	.LFE1:
  68               	.global	initUSART
  70               	initUSART:
  71               	.LFB2:
  72               		.file 2 "serial.h"
   1:serial.h      **** #define BAUD_RATE 9600
   2:serial.h      **** #define BAUD_VAL (F_CPU / (16 * BAUD_RATE) - 1)
   3:serial.h      **** 
   4:serial.h      **** #include <avr/io.h>
   5:serial.h      **** #include "cpu_def.h"
   6:serial.h      **** 
   7:serial.h      **** void initUSART(void);
   8:serial.h      **** uint8_t getCh(void);
   9:serial.h      **** void putCh(uint8_t data);
  10:serial.h      **** 
  11:serial.h      **** void initUSART(void){
  73               		.loc 2 11 0
  74               		.cfi_startproc
  75               	/* prologue: function */
  76               	/* frame size = 0 */
  77               	/* stack size = 0 */
  78               	.L__stack_usage = 0
  12:serial.h      ****    //Set Baud rate; ubrr_value = F_OSC/(16 x Baud_rate) - 1; e.g. 8e6/(9600*16) -1 =51
  13:serial.h      **** 	UBRRL_REG = BAUD_VAL;
  79               		.loc 2 13 0
  80 0034 85EC      		ldi r24,lo8(-59)
  81 0036 8093 C400 		sts 196,r24
  14:serial.h      **** 	UBRRH_REG = (BAUD_VAL >> 8);
  82               		.loc 2 14 0
  83 003a 82E0      		ldi r24,lo8(2)
  84 003c 8093 C500 		sts 197,r24
  15:serial.h      **** 	UCSRC_REG |= (1 << UCSZ1_BIT) | (1 << UCSZ0_BIT);
  85               		.loc 2 15 0
  86 0040 E2EC      		ldi r30,lo8(-62)
  87 0042 F0E0      		ldi r31,0
  88 0044 8081      		ld r24,Z
  89 0046 8660      		ori r24,lo8(6)
  90 0048 8083      		st Z,r24
  16:serial.h      **** 
  17:serial.h      **** 	#ifdef ATMEGA_32A
  18:serial.h      **** 	UCSRC_REG |= (1 << URSEL_BIT);
  19:serial.h      **** 	#endif
  20:serial.h      **** 
  21:serial.h      **** 	//Enable The receiver and transmitter
  22:serial.h      **** 	UCSRB_REG = (1 << RXEN_BIT) | (1 << TXEN_BIT);
  91               		.loc 2 22 0
  92 004a 88E1      		ldi r24,lo8(24)
  93 004c 8093 C100 		sts 193,r24
  94               	/* epilogue start */
  23:serial.h      **** }
  95               		.loc 2 23 0
  96 0050 0895      		ret
  97               		.cfi_endproc
  98               	.LFE2:
 100               	.global	getCh
 102               	getCh:
 103               	.LFB3:
  24:serial.h      **** 
  25:serial.h      **** uint8_t getCh(void){
 104               		.loc 2 25 0
 105               		.cfi_startproc
 106               	/* prologue: function */
 107               	/* frame size = 0 */
 108               	/* stack size = 0 */
 109               	.L__stack_usage = 0
 110               	.L7:
  26:serial.h      **** 	while(!(UCSRA_REG & (1 << RXC_BIT)));
 111               		.loc 2 26 0 discriminator 1
 112 0052 8091 C000 		lds r24,192
 113 0056 87FF      		sbrs r24,7
 114 0058 00C0      		rjmp .L7
  27:serial.h      **** 	return UDR_REG;
 115               		.loc 2 27 0
 116 005a 8091 C600 		lds r24,198
 117               	/* epilogue start */
  28:serial.h      **** }
 118               		.loc 2 28 0
 119 005e 0895      		ret
 120               		.cfi_endproc
 121               	.LFE3:
 123               	.global	putCh
 125               	putCh:
 126               	.LFB4:
  29:serial.h      **** 
  30:serial.h      **** void putCh(uint8_t data){
 127               		.loc 2 30 0
 128               		.cfi_startproc
 129               	/* prologue: function */
 130               	/* frame size = 0 */
 131               	/* stack size = 0 */
 132               	.L__stack_usage = 0
 133               	.LVL1:
 134               	.L10:
  31:serial.h      **** 	while(!(UCSRA_REG & (1 << UDRE_BIT)));
 135               		.loc 2 31 0 discriminator 1
 136 0060 9091 C000 		lds r25,192
 137 0064 95FF      		sbrs r25,5
 138 0066 00C0      		rjmp .L10
  32:serial.h      **** 	UDR_REG = data;
 139               		.loc 2 32 0
 140 0068 8093 C600 		sts 198,r24
 141               	/* epilogue start */
  33:serial.h      **** }...
 142               		.loc 2 33 0
 143 006c 0895      		ret
 144               		.cfi_endproc
 145               	.LFE4:
 147               	.global	controlMotor
 149               	controlMotor:
 150               	.LFB6:
 151               		.file 3 "main.c"
   1:main.c        **** #define F_CPU 16000000UL
   2:main.c        **** 
   3:main.c        **** #define UP 		0x00
   4:main.c        **** #define DOWN	0x01
   5:main.c        **** #define RIGHT	0x02
   6:main.c        **** #define LEFT	0x03
   7:main.c        **** 
   8:main.c        **** #define MOTOR_DDR	DDRC
   9:main.c        **** #define MOTOR_PORT	PORTC
  10:main.c        **** 
  11:main.c        **** #define FORWARD_MODE() (MOTOR_PORT = 0x05)
  12:main.c        **** #define REVERSE_MODE() (MOTOR_PORT = 0x0A)
  13:main.c        **** 
  14:main.c        **** #define MAX_PWM_SPEED	20000
  15:main.c        **** #define MIN_PWM_SPEED	1000
  16:main.c        **** 
  17:main.c        **** #define FORWARD	0x04
  18:main.c        **** #define REVERSE	0x05
  19:main.c        **** 
  20:main.c        **** //Comment the MCU which you're not using.
  21:main.c        **** #define ATMEGA_328P
  22:main.c        **** //#define ATMEGA_32A
  23:main.c        **** 
  24:main.c        **** #include <avr/io.h>
  25:main.c        **** #include "pwm.h"
  26:main.c        **** #include "serial.h"
  27:main.c        **** 
  28:main.c        **** void controlMotor(uint8_t status);
  29:main.c        **** 
  30:main.c        **** uint16_t channelA = 0, channelB = 0;
  31:main.c        **** uint8_t channelA_status = FORWARD, channelB_status = FORWARD;
  32:main.c        **** 
  33:main.c        **** int main(void){
  34:main.c        **** 
  35:main.c        **** 	setupPWM();
  36:main.c        **** 	initUSART();
  37:main.c        **** 
  38:main.c        **** 	MOTOR_DDR = 0x0F;
  39:main.c        **** 
  40:main.c        **** 	pwm(CH_A, 0, MAX_PWM_SPEED);
  41:main.c        **** 	pwm(CH_B, 0, MAX_PWM_SPEED);
  42:main.c        **** 
  43:main.c        **** 	while(1){
  44:main.c        **** 		uint8_t input = getCh();
  45:main.c        **** 
  46:main.c        **** 		if(input == '0')
  47:main.c        **** 			controlMotor(FORWARD);
  48:main.c        **** 		else if(input == '1')
  49:main.c        **** 			controlMotor(REVERSE);
  50:main.c        **** 	}
  51:main.c        **** 	
  52:main.c        **** 	return 0;
  53:main.c        **** }
  54:main.c        **** 
  55:main.c        **** void controlMotor(uint8_t status){
 152               		.loc 3 55 0
 153               		.cfi_startproc
 154               	.LVL2:
 155               	/* prologue: function */
 156               	/* frame size = 0 */
 157               	/* stack size = 0 */
 158               	.L__stack_usage = 0
 159 006e 2091 0000 		lds r18,channelA
 160 0072 3091 0000 		lds r19,channelA+1
  56:main.c        **** 	switch(status){
 161               		.loc 3 56 0
 162 0076 8430      		cpi r24,lo8(4)
 163 0078 01F0      		breq .L15
 164 007a 8530      		cpi r24,lo8(5)
 165 007c 01F4      		brne .+2
 166 007e 00C0      		rjmp .L16
 167               	.LVL3:
 168               	.L14:
  57:main.c        **** 		case FORWARD:
  58:main.c        **** 			if(channelA_status == FORWARD && channelB_status == FORWARD){
  59:main.c        **** 				(channelA == MAX_PWM_SPEED) ? (channelA = MAX_PWM_SPEED) : (channelA += 100);
  60:main.c        **** 				channelB = channelA;
  61:main.c        **** 			}else if(channelA_status == REVERSE && channelB_status == REVERSE){
  62:main.c        **** 				if(channelA > MIN_PWM_SPEED){
  63:main.c        **** 					channelA -= 300;
  64:main.c        **** 					channelB = channelA;
  65:main.c        **** 				}else{
  66:main.c        **** 					FORWARD_MODE();
  67:main.c        **** 					channelA_status = FORWARD;
  68:main.c        **** 					channelB_status = FORWARD;
  69:main.c        **** 				}
  70:main.c        **** 			}
  71:main.c        **** 			break;
  72:main.c        **** 		case REVERSE:
  73:main.c        **** 			if(channelA_status == REVERSE && channelB_status == REVERSE){
  74:main.c        **** 				(channelA == MAX_PWM_SPEED) ? (channelA = MAX_PWM_SPEED) : (channelA += 100);
  75:main.c        **** 				channelB = channelA;
  76:main.c        **** 			}else if(channelA_status == FORWARD && channelB_status == FORWARD){
  77:main.c        **** 				if(channelA > MIN_PWM_SPEED){
  78:main.c        **** 					channelA -= 300;
  79:main.c        **** 					channelB = channelA;
  80:main.c        **** 				}else{
  81:main.c        **** 					REVERSE_MODE();
  82:main.c        **** 					channelA_status = REVERSE;
  83:main.c        **** 					channelB_status = REVERSE;
  84:main.c        **** 				}
  85:main.c        **** 			}
  86:main.c        **** 			break;
  87:main.c        **** 	}
  88:main.c        **** 
  89:main.c        **** 	pwm(CH_A, channelA, MAX_PWM_SPEED);
 169               		.loc 3 89 0
 170 0080 2091 0000 		lds r18,channelA
 171 0084 3091 0000 		lds r19,channelA+1
 172               	.LVL4:
 173               	.LBB11:
 174               	.LBB12:
  19:pwm.h         **** 	ICR1 = period;
 175               		.loc 1 19 0
 176 0088 80E2      		ldi r24,lo8(32)
 177 008a 9EE4      		ldi r25,lo8(78)
 178 008c 9093 8700 		sts 134+1,r25
 179 0090 8093 8600 		sts 134,r24
  20:pwm.h         **** 	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 180               		.loc 1 20 0
 181 0094 3093 8900 		sts 136+1,r19
 182 0098 2093 8800 		sts 136,r18
 183               	.LVL5:
 184               	.LBE12:
 185               	.LBE11:
  90:main.c        **** 	pwm(CH_B, channelB, MAX_PWM_SPEED);
 186               		.loc 3 90 0
 187 009c 2091 0000 		lds r18,channelB
 188 00a0 3091 0000 		lds r19,channelB+1
 189               	.LVL6:
 190               	.LBB13:
 191               	.LBB14:
  19:pwm.h         **** 	ICR1 = period;
 192               		.loc 1 19 0
 193 00a4 9093 8700 		sts 134+1,r25
 194 00a8 8093 8600 		sts 134,r24
  20:pwm.h         **** 	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 195               		.loc 1 20 0
 196 00ac 3093 8B00 		sts 138+1,r19
 197 00b0 2093 8A00 		sts 138,r18
 198               	.LVL7:
 199               	/* epilogue start */
 200               	.LBE14:
 201               	.LBE13:
  91:main.c        **** }...
 202               		.loc 3 91 0
 203 00b4 0895      		ret
 204               	.LVL8:
 205               	.L15:
  58:main.c        **** 			if(channelA_status == FORWARD && channelB_status == FORWARD){
 206               		.loc 3 58 0
 207 00b6 9091 0000 		lds r25,channelA_status
 208 00ba 9430      		cpi r25,lo8(4)
 209 00bc 01F4      		brne .L17
  58:main.c        **** 			if(channelA_status == FORWARD && channelB_status == FORWARD){
 210               		.loc 3 58 0 is_stmt 0 discriminator 1
 211 00be 8091 0000 		lds r24,channelB_status
 212               	.LVL9:
 213 00c2 8430      		cpi r24,lo8(4)
 214 00c4 01F4      		brne .L14
  59:main.c        **** 				(channelA == MAX_PWM_SPEED) ? (channelA = MAX_PWM_SPEED) : (channelA += 100);
 215               		.loc 3 59 0 is_stmt 1
 216 00c6 2032      		cpi r18,32
 217 00c8 4EE4      		ldi r20,78
 218 00ca 3407      		cpc r19,r20
 219 00cc 01F0      		breq .L21
 220               	.L31:
  74:main.c        **** 				(channelA == MAX_PWM_SPEED) ? (channelA = MAX_PWM_SPEED) : (channelA += 100);
 221               		.loc 3 74 0 discriminator 2
 222 00ce 2C59      		subi r18,-100
 223 00d0 3F4F      		sbci r19,-1
 224 00d2 3093 0000 		sts channelA+1,r19
 225 00d6 2093 0000 		sts channelA,r18
 226 00da 00C0      		rjmp .L21
 227               	.LVL10:
 228               	.L17:
  61:main.c        **** 			}else if(channelA_status == REVERSE && channelB_status == REVERSE){
 229               		.loc 3 61 0
 230 00dc 9530      		cpi r25,lo8(5)
 231 00de 01F4      		brne .L14
  61:main.c        **** 			}else if(channelA_status == REVERSE && channelB_status == REVERSE){
 232               		.loc 3 61 0 is_stmt 0 discriminator 1
 233 00e0 9091 0000 		lds r25,channelB_status
 234 00e4 9530      		cpi r25,lo8(5)
 235 00e6 01F4      		brne .L14
  62:main.c        **** 				if(channelA > MIN_PWM_SPEED){
 236               		.loc 3 62 0 is_stmt 1
 237 00e8 293E      		cpi r18,-23
 238 00ea 43E0      		ldi r20,3
 239 00ec 3407      		cpc r19,r20
 240 00ee 00F0      		brlo .L30
 241               	.L29:
  78:main.c        **** 					channelA -= 300;
 242               		.loc 3 78 0
 243 00f0 2C52      		subi r18,44
 244 00f2 3140      		sbci r19,1
 245 00f4 3093 0000 		sts channelA+1,r19
 246 00f8 2093 0000 		sts channelA,r18
  79:main.c        **** 					channelB = channelA;
 247               		.loc 3 79 0
 248 00fc 3093 0000 		sts channelB+1,r19
 249 0100 2093 0000 		sts channelB,r18
 250 0104 00C0      		rjmp .L14
 251               	.L16:
  73:main.c        **** 			if(channelA_status == REVERSE && channelB_status == REVERSE){
 252               		.loc 3 73 0
 253 0106 9091 0000 		lds r25,channelA_status
 254 010a 9530      		cpi r25,lo8(5)
 255 010c 01F4      		brne .L20
  73:main.c        **** 			if(channelA_status == REVERSE && channelB_status == REVERSE){
 256               		.loc 3 73 0 is_stmt 0 discriminator 1
 257 010e 8091 0000 		lds r24,channelB_status
 258               	.LVL11:
 259 0112 8530      		cpi r24,lo8(5)
 260 0114 01F0      		breq .+2
 261 0116 00C0      		rjmp .L14
  74:main.c        **** 				(channelA == MAX_PWM_SPEED) ? (channelA = MAX_PWM_SPEED) : (channelA += 100);
 262               		.loc 3 74 0 is_stmt 1
 263 0118 2032      		cpi r18,32
 264 011a 8EE4      		ldi r24,78
 265 011c 3807      		cpc r19,r24
 266 011e 01F4      		brne .L31
 267               	.L21:
  75:main.c        **** 				channelB = channelA;
 268               		.loc 3 75 0
 269 0120 8091 0000 		lds r24,channelA
 270 0124 9091 0000 		lds r25,channelA+1
 271 0128 9093 0000 		sts channelB+1,r25
 272 012c 8093 0000 		sts channelB,r24
 273 0130 00C0      		rjmp .L14
 274               	.LVL12:
 275               	.L20:
  76:main.c        **** 			}else if(channelA_status == FORWARD && channelB_status == FORWARD){
 276               		.loc 3 76 0
 277 0132 9430      		cpi r25,lo8(4)
 278 0134 01F0      		breq .+2
 279 0136 00C0      		rjmp .L14
  76:main.c        **** 			}else if(channelA_status == FORWARD && channelB_status == FORWARD){
 280               		.loc 3 76 0 is_stmt 0 discriminator 1
 281 0138 9091 0000 		lds r25,channelB_status
 282 013c 9430      		cpi r25,lo8(4)
 283 013e 01F0      		breq .+2
 284 0140 00C0      		rjmp .L14
  77:main.c        **** 				if(channelA > MIN_PWM_SPEED){
 285               		.loc 3 77 0 is_stmt 1
 286 0142 293E      		cpi r18,-23
 287 0144 93E0      		ldi r25,3
 288 0146 3907      		cpc r19,r25
 289 0148 00F4      		brsh .L29
  81:main.c        **** 					REVERSE_MODE();
 290               		.loc 3 81 0
 291 014a 9AE0      		ldi r25,lo8(10)
 292               	.L30:
 293 014c 98B9      		out 0x8,r25
  82:main.c        **** 					channelA_status = REVERSE;
 294               		.loc 3 82 0
 295 014e 8093 0000 		sts channelA_status,r24
  83:main.c        **** 					channelB_status = REVERSE;
 296               		.loc 3 83 0
 297 0152 8093 0000 		sts channelB_status,r24
 298 0156 00C0      		rjmp .L14
 299               		.cfi_endproc
 300               	.LFE6:
 302               		.section	.text.startup,"ax",@progbits
 303               	.global	main
 305               	main:
 306               	.LFB5:
  33:main.c        **** int main(void){
 307               		.loc 3 33 0
 308               		.cfi_startproc
 309               	/* prologue: function */
 310               	/* frame size = 0 */
 311               	/* stack size = 0 */
 312               	.L__stack_usage = 0
  35:main.c        **** 	setupPWM();
 313               		.loc 3 35 0
 314 0000 0E94 0000 		call setupPWM
 315               	.LVL13:
  36:main.c        **** 	initUSART();
 316               		.loc 3 36 0
 317 0004 0E94 0000 		call initUSART
 318               	.LVL14:
  38:main.c        **** 	MOTOR_DDR = 0x0F;
 319               		.loc 3 38 0
 320 0008 8FE0      		ldi r24,lo8(15)
 321 000a 87B9      		out 0x7,r24
 322               	.LVL15:
 323               	.LBB15:
 324               	.LBB16:
  19:pwm.h         **** 	ICR1 = period;
 325               		.loc 1 19 0
 326 000c 80E2      		ldi r24,lo8(32)
 327 000e 9EE4      		ldi r25,lo8(78)
 328 0010 9093 8700 		sts 134+1,r25
 329 0014 8093 8600 		sts 134,r24
  20:pwm.h         **** 	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 330               		.loc 1 20 0
 331 0018 1092 8900 		sts 136+1,__zero_reg__
 332 001c 1092 8800 		sts 136,__zero_reg__
 333               	.LVL16:
 334               	.LBE16:
 335               	.LBE15:
 336               	.LBB17:
 337               	.LBB18:
  19:pwm.h         **** 	ICR1 = period;
 338               		.loc 1 19 0
 339 0020 9093 8700 		sts 134+1,r25
 340 0024 8093 8600 		sts 134,r24
  20:pwm.h         **** 	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 341               		.loc 1 20 0
 342 0028 1092 8B00 		sts 138+1,__zero_reg__
 343 002c 1092 8A00 		sts 138,__zero_reg__
 344               	.L33:
 345               	.LBE18:
 346               	.LBE17:
 347               	.LBB19:
  44:main.c        **** 		uint8_t input = getCh();
 348               		.loc 3 44 0
 349 0030 0E94 0000 		call getCh
 350               	.LVL17:
  46:main.c        **** 		if(input == '0')
 351               		.loc 3 46 0
 352 0034 8033      		cpi r24,lo8(48)
 353 0036 01F4      		brne .L34
  47:main.c        **** 			controlMotor(FORWARD);
 354               		.loc 3 47 0
 355 0038 84E0      		ldi r24,lo8(4)
 356               	.LVL18:
 357               	.L36:
  49:main.c        **** 			controlMotor(REVERSE);
 358               		.loc 3 49 0
 359 003a 0E94 0000 		call controlMotor
 360               	.LVL19:
 361 003e 00C0      		rjmp .L33
 362               	.LVL20:
 363               	.L34:
  48:main.c        **** 		else if(input == '1')
 364               		.loc 3 48 0
 365 0040 8133      		cpi r24,lo8(49)
 366 0042 01F4      		brne .L33
  49:main.c        **** 			controlMotor(REVERSE);
 367               		.loc 3 49 0
 368 0044 85E0      		ldi r24,lo8(5)
 369               	.LVL21:
 370 0046 00C0      		rjmp .L36
 371               	.LBE19:
 372               		.cfi_endproc
 373               	.LFE5:
 375               	.global	channelB_status
 376               		.data
 379               	channelB_status:
 380 0000 04        		.byte	4
 381               	.global	channelA_status
 384               	channelA_status:
 385 0001 04        		.byte	4
 386               	.global	channelB
 387               		.section .bss
 390               	channelB:
 391 0000 0000      		.zero	2
 392               	.global	channelA
 395               	channelA:
 396 0002 0000      		.zero	2
 397               		.text
 398               	.Letext0:
 399               		.file 4 "/usr/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc4inX0s.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc4inX0s.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc4inX0s.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc4inX0s.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc4inX0s.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc4inX0s.s:12     .text:0000000000000000 setupPWM
     /tmp/cc4inX0s.s:39     .text:0000000000000014 pwm
     /tmp/cc4inX0s.s:70     .text:0000000000000034 initUSART
     /tmp/cc4inX0s.s:102    .text:0000000000000052 getCh
     /tmp/cc4inX0s.s:125    .text:0000000000000060 putCh
     /tmp/cc4inX0s.s:149    .text:000000000000006e controlMotor
     /tmp/cc4inX0s.s:395    .bss:0000000000000002 channelA
     /tmp/cc4inX0s.s:390    .bss:0000000000000000 channelB
     /tmp/cc4inX0s.s:384    .data:0000000000000001 channelA_status
     /tmp/cc4inX0s.s:379    .data:0000000000000000 channelB_status
     /tmp/cc4inX0s.s:305    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
